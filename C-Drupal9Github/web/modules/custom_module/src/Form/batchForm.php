<?php

namespace Drupal\custom_module\Form;

use Drupal\Core\Form\FormStateInterface;
use Drupal\node\Entity\Node;

class batchForm extends \Drupal\Core\Form\ConfigFormBase
{

  /**
   * @inheritDoc
   */
  protected function getEditableConfigNames()
  {
    // TODO: Implement getEditableConfigNames() method.
  }

  /**
   * @inheritDoc
   */
  public function getFormId()
  {
    return 'batch_form';
  }

  public function buildForm(array $form, FormStateInterface $form_state)
  {

    $options = [
      'article' => "Article"
    ];
    $form['node_type'] = [
      '#type' => "select",
      '#options' => $options,
      '#default_value' => 'article'
    ];

    return parent::buildForm($form, $form_state); // TODO: Change the autogenerated stub
  }

  public function submitForm(array &$form, FormStateInterface $form_state)
  {
    $node_type = $form_state->getValues()['node_type'];

    $nids = \Drupal::entityQuery('node')
      ->condition('type', $node_type)
      ->execute();

    $nid_group = array_chunk($nids, 2);
    $batch = [
      'title' => 'Nodes Updating...',
      'operations' => [],
      'init_message' => "Connecting..",
      'progress_message' => t('Processed @current out of @total.'),
      'finished'=>'\Drupal\custom_module\Form\batchForm::finished'
    ];
    foreach ($nid_group as $nid_arr){
      $batch['operations'][] = [
        '\Drupal\custom_module\Form\batchForm::updatingTitle', [$nid_arr]
      ];
    }
    batch_set($batch);
    parent::submitForm($form, $form_state);
  }

  public function updatingTitle($nid_arr){
    foreach ($nid_arr as $nid){
      $node = Node::load($nid);
      $node->setTitle($node->getTitle().' Textxxx');
      $node->save();
    }
    return [];
  }

  public function finished(){
    return "Successfully done.";
  }
}
